prompt -------------------------------------------;
Prompt This script demonstrates the use of JSON Relational Duality in Oracle Database.
prompt LiveLabs: Work with JSON Relational Duality Views using SQL
Prompt https://livelabs.oracle.com/pls/apex/r/dbpm/livelabs/run-workshop?p210_wid=3968&p210_wec=&session=4333250171278
prompt Github Json duality view https://github.com/oracle-samples/oracle-db-examples/tree/main/json-relational-duality
prompt Github PDF https://github.com/oracle-samples/oracle-db-examples/blob/main/json-relational-duality/DualityViewTutorial-REST.pdf
prompt source code https://github.com/oracle-samples/oracle-db-examples/blob/main/json-relational-duality/DualityViewTutorial.sql
prompt It creates a set of duality views for a simple racing application,
prompt allowing you to manage teams, drivers  
prompt Do cleanup for previous run (if any).
pause -------------------------------------------;

drop view  if exists team_dv;
drop view  if exists race_dv;
drop view  if exists driver_dv;
drop view  if exists team_dv_graphql;
drop view  if exists race_dv_graphql;
drop view  if exists driver_dv_graphql;
drop table if exists driver_race_map;
drop table if exists race;
drop table if exists driver;
drop table if exists team;

prompt -------------------------------------------;
Prompt Create base tables.
pause -------------------------------------------;
--
CREATE TABLE if not exists team 
  (team_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
   name    VARCHAR2(255) NOT NULL UNIQUE,
   points  INTEGER NOT NULL,
   CONSTRAINT team_pk PRIMARY KEY(team_id));

CREATE TABLE if not exists  driver
  (driver_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
   name      VARCHAR2(255) NOT NULL UNIQUE,
   points    INTEGER NOT NULL,
   team_id   INTEGER,
   CONSTRAINT driver_pk PRIMARY KEY(driver_id),
   CONSTRAINT driver_fk FOREIGN KEY(team_id) REFERENCES team(team_id));

CREATE TABLE if not exists race
  (race_id   INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
   name      VARCHAR2(255) NOT NULL UNIQUE,
   laps      INTEGER NOT NULL,
   race_date DATE,
   podium    JSON,
   CONSTRAINT   race_pk PRIMARY KEY(race_id));
  
CREATE TABLE if not exists driver_race_map
  (driver_race_map_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
   race_id            INTEGER NOT NULL,
   driver_id          INTEGER NOT NULL,
   position           INTEGER,
   CONSTRAINT     driver_race_map_uk  UNIQUE (race_id, driver_id),
   CONSTRAINT     driver_race_map_pk  PRIMARY KEY(driver_race_map_id),
   CONSTRAINT     driver_race_map_fk1 FOREIGN KEY(race_id)   REFERENCES race(race_id),
   CONSTRAINT     driver_race_map_fk2 FOREIGN KEY(driver_id) REFERENCES driver(driver_id));

prompt -------------------------------------------;
prompt Create a trigger on the driver_race_map table to populate;
prompt the points for drivers and teams based on their;
pause -------------------------------------------;

CREATE OR REPLACE TRIGGER driver_race_map_trigger
  BEFORE INSERT ON driver_race_map
  FOR EACH ROW
  DECLARE
    v_points  INTEGER;
    v_team_id INTEGER;
BEGIN
  SELECT team_id INTO v_team_id FROM driver WHERE driver_id = :NEW.driver_id;

  IF :NEW.position = 1 THEN
    v_points := 25;
  ELSIF :NEW.position = 2 THEN
    v_points := 18;
  ELSIF :NEW.position = 3 THEN
    v_points := 15;
  ELSIF :NEW.position = 4 THEN
    v_points := 12;
  ELSIF :NEW.position = 5 THEN
    v_points := 10;
  ELSIF :NEW.position = 6 THEN
    v_points := 8;
  ELSIF :NEW.position = 7 THEN
    v_points := 6;
  ELSIF :NEW.position = 8 THEN
    v_points := 4;
  ELSIF :NEW.position = 9 THEN
    v_points := 2;
  ELSIF :NEW.position = 10 THEN
    v_points := 1;
  ELSE
    v_points := 0;
  END IF;

  UPDATE driver SET points = points + v_points
    WHERE driver_id = :NEW.driver_id;
  UPDATE team SET points = points + v_points
    WHERE team_id = v_team_id;
END;
/

prompt -------------------------------------------;
prompt Create duality race duality views race_dv
pause -------------------------------------------;

CREATE OR REPLACE JSON RELATIONAL DUALITY VIEW race_dv AS
  SELECT JSON {'_id' : r.race_id,
               'name'   : r.name,
               'laps'   : r.laps WITH NOUPDATE,
               'date'   : r.race_date,
               'podium' : r.podium WITH NOCHECK,
               'result' :
                 [ SELECT JSON {'driverRaceMapId' : drm.driver_race_map_id,
                                'position'        : drm.position,
                                UNNEST
                                  (SELECT JSON {'driverId' : d.driver_id,
                                                'name'     : d.name}
                                     FROM driver d WITH NOINSERT UPDATE NODELETE
                                     WHERE d.driver_id = drm.driver_id)}
                     FROM driver_race_map drm WITH INSERT UPDATE DELETE
                     WHERE drm.race_id = r.race_id ]}
    FROM race r WITH INSERT UPDATE DELETE;

prompt ------------------------------------------------;
prompt Create duality race duality views race_dv_graphql using GraphQL syntax;
pause -------------------------------------------------;    

CREATE OR REPLACE JSON RELATIONAL DUALITY VIEW race_dv_graphql AS
  race @insert @update @delete
  {
    _id : race_id
    name   : name
    laps   : laps @noUpdate
    date   : race_date
    podium : podium @noCheck
    result : driver_race_map @insert @update @delete
    [
     {
      driverRaceMapId : driver_race_map_id
      position        : position
      driver @noInsert @update @noDelete @unnest
      {
        driverId : driver_id
        name     : name
      }
     }
    ]
  };


prompt -------------------------------------------;
prompt Create duality race duality views driver_dv using SQL syntax;
pause -------------------------------------------;      


CREATE OR REPLACE JSON RELATIONAL DUALITY VIEW driver_dv AS
  SELECT JSON {'_id' : d.driver_id,
               'name'     : d.name,
               'points'   : d.points,
               UNNEST
                 (SELECT JSON {'teamId' : t.team_id,
                               'team'   : t.name WITH NOCHECK}
                    FROM team t WITH NOINSERT NOUPDATE NODELETE
                    WHERE t.team_id = d.team_id),
               'race'     :
                 [ SELECT JSON {'driverRaceMapId' : drm.driver_race_map_id,
                                UNNEST
                                  (SELECT JSON {'raceId' : r.race_id,
                                                'name'   : r.name}
                                     FROM race r WITH NOINSERT NOUPDATE NODELETE
                                     WHERE r.race_id = drm.race_id),
                                'finalPosition'   : drm.position}
                    FROM driver_race_map drm WITH INSERT UPDATE NODELETE
                    WHERE drm.driver_id = d.driver_id ]}
    FROM driver d WITH INSERT UPDATE DELETE;
  

prompt -------------------------------------------;
prompt Create duality race duality views driver_dv_graphql using GraphQL syntax;
pause -------------------------------------------;      

CREATE OR REPLACE JSON RELATIONAL DUALITY VIEW driver_dv_graphql AS
  driver @insert @update @delete
  {
    _id : driver_id
    name     : name
    points   : points
    team @noInsert @noUpdate @noDelete @unnest
    {
      teamId : team_id
      team   : name @noCheck
    }
    race : driver_race_map @insert @update @noDelete
    [
     {
      driverRaceMapId : driver_race_map_id
      race @noInsert @noUpdate @noDelete @unnest
      {
        raceId : race_id
        name   : name
      }
      finalPosition   : position
     }
    ]
  };

prompt -------------------------------------------;
prompt Create duality race duality views team_dv using SQL syntax;
pause -------------------------------------------;   

CREATE OR REPLACE JSON RELATIONAL DUALITY VIEW team_dv AS
  SELECT JSON {'_id' : t.team_id,
               'name'   : t.name,
               'points' : t.points,
               'driver' :
                 [ SELECT JSON {'driverId' : d.driver_id,
                                'name'     : d.name,
                                'points'   : d.points WITH NOCHECK}
                     FROM driver d WITH INSERT UPDATE
                     WHERE d.team_id = t.team_id ]}
    FROM team t WITH INSERT UPDATE DELETE;


prompt -------------------------------------------;
prompt Create duality race duality views team_dv_graphql using GraphQL syntax;
pause -------------------------------------------;   

CREATE OR REPLACE JSON RELATIONAL DUALITY VIEW team_dv_graphql  AS
  team @insert @update @delete
  {
    _id : team_id
    name   : name
    points : points
    driver : driver @insert @update
    [
     {
      driverId : driver_id
      name     : name
      points   : points @noCheck
     }
    ]
  };


prompt -------------------------------------------;
prompt Step 2: List all documents in a duality view
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM driver_dv;
SELECT json_serialize(data PRETTY) FROM race_dv;
SELECT json_serialize(data PRETTY) FROM team_dv;


prompt -------------------------------------------;
prompt Step 3: Populate the duality views 
pause -------------------------------------------;   


prompt -------------------------------------------;
prompt Insert a collection of team documents into TEAM_DV.
prompt This automatically populates the driver and team table as well as the
prompt driver collection.
pause -------------------------------------------;   

INSERT INTO team_dv VALUES ('{"_id" : 301,
                              "name"   : "Red Bull",
                              "points" : 0,
                              "driver" : [ {"driverId" : 101,
                                            "name"     : "Max Verstappen",
                                            "points"   : 0},
                                           {"driverId" : 102,
                                            "name"     : "Sergio Perez",
                                            "points"   : 0} ]}');

INSERT INTO team_dv VALUES ('{"_id" : 302,
                              "name"   : "Ferrari",
                              "points" : 0,
                              "driver" : [ {"driverId" : 103,
                                            "name"     : "Charles Leclerc",
                                            "points"   : 0},
                                           {"driverId" : 104,
                                            "name"     : "Carlos Sainz Jr",
                                            "points"   : 0} ]}');

INSERT INTO team_dv VALUES ('{"_id" : 2,
                              "name"   : "Mercedes",
                              "points" : 0,
                              "driver" : [ {"driverId" : 105,
                                            "name"     : "George Russell",
                                            "points"   : 0},
                                           {"driverId" : 106,
                                            "name"     : "Lewis Hamilton",
                                            "points"   : 0} ]}');


prompt -------------------------------------------;
prompt Insert a collection of race documents into RACE_DV.
prompt This automatically populates
pause -------------------------------------------;   

INSERT INTO race_dv VALUES ('{"_id" : 201,
                              "name"   : "Bahrain Grand Prix",
                              "laps"   : 57,
                              "date"   : "2022-03-20T00:00:00",
                              "podium" : {}}');

INSERT INTO race_dv VALUES ('{"_id" : 202,
                              "name"   : "Saudi Arabian Grand Prix",
                              "laps"   : 50,
                              "date"   : "2022-03-27T00:00:00",
                              "podium" : {}}');

INSERT INTO race_dv VALUES ('{"_id" : 203,
                              "name"   : "Australian Grand Prix",
                              "laps"   : 58,
                              "date"   : "2022-04-09T00:00:00",
                              "podium" : {}}');

COMMIT;

prompt -------------------------------------------;
prompt Step 4: See the effects of populating a duality view
prompt Populating a duality view automatically updates data shown in related
prompt Populating a duality view automatically updates data shown in related
prompt duality views, by updating their underlying tables. For example, in the
prompt previous step documents were inserted into the team_dv duality view. This
prompt duality view joins the team table with the driver table, so on insert into
prompt this duality view both the team table as well as the driver table are
prompt populated. If you now list the contents of the driver_dv duality view, which
prompt is based on the driver table, it has documents as well.
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM driver_dv;

prompt -------------------------------------------;
prompt Select fron race_Dv
pause -------------------------------------------;  

SELECT json_serialize(data PRETTY) FROM race_dv;


prompt ----------------------------------------------------------
prompt Step 5: Find documents matching a filter (predicate) --
prompt with optional projection of fields and sorting    --
prompt ----------------------------------------------------------
prompt Find race info by raceId.
prompt You can use JSON functions, such as json_value or json_exists in predicates
prompt when querying duality views. You can also use simplified dot notation in
prompt predicates (see Step 9 for an example of this). The json_exists function is
prompt more powerful than json_value in terms of the conditions it can express and
prompt is used by the REST interface to translate QBEs.
pause ---------------------------------------------------------------------------;

SELECT json_serialize(data PRETTY)
  FROM race_dv WHERE json_value(data, '$._id') = 201;

prompt -------------------------------------------;
prompt Project specific document fields.
prompt SQL, specific documents fields can be requested using the KEEP operator
prompt in json_transform (other fields will be excluded in returned document).
prompt Alternatively, you can exclude specific fields from the returned documents
prompt using the REMOVE operator in json_transform.
pause -------------------------------------------;   

SELECT json_serialize(json_transform(data, KEEP '$.name', '$.team') PRETTY)
  FROM driver_dv;

prompt -------------------------------------------;
prompt Sort returned documents by field value.
prompt Returned documents can be sorted, using simplified syntax or json_value.
pause -------------------------------------------;   

SELECT json_serialize(json_transform(data, KEEP '$.name', '$.team') PRETTY)
  FROM driver_dv ORDER BY json_value(data, '$.team');


prompt --------------------------------------
prompt Step 6: Replace a document by ID --
prompt --------------------------------------
prompt 
prompt Announce results for the Bahrain Grand Prix.
prompt Note that the "etag" value supplied in the content is used for "out-of-
prompt the-box" optimistic locking, to prevent the well-known "lost update" problem
prompt that can occur with concurrent operations. During the replace by ID
prompt operation, the database checks that the eTag provided in the replacement
prompt document matches the latest eTag of the target duality view document. If the
prompt eTags do not match, which can occur if another concurrent operation updated
prompt the same document, an error is thrown. In case of such an error, you can
prompt reread the updated value (including the updated eTag), and retry the replace
prompt operation again, adjusting it (if desired) based on the updated value.
prompt To see that a replace using an eTag that is not the most recent fails, run the same command again.
pause -------------------------------------------;   

UPDATE race_dv dv
  SET data = ('{_metadata : {"etag" : "2E8DC09543DD25DC7D588FB9734D962B"},
                "_id" : 201,
                "name"   : "Bahrain Grand Prix",
                "laps"   : 57,
                "date"   : "2022-03-20T00:00:00",
                "podium" :
                  {"winner"         : {"name" : "Charles Leclerc",
                                       "time" : "01:37:33.584"},
                   "firstRunnerUp"  : {"name" : "Carlos Sainz Jr",
                                       "time" : "01:37:39.182"},
                   "secondRunnerUp" : {"name" : "Lewis Hamilton",
                                       "time" : "01:37:43.259"}},
                "result" : [ {"driverRaceMapId" : 3,
                              "position"        : 1,
                              "driverId"        : 103,
                              "name"            : "Charles Leclerc"},
                             {"driverRaceMapId" : 4,
                              "position"        : 2,
                              "driverId"        : 104,
                              "name"            : "Carlos Sainz Jr"},
                             {"driverRaceMapId" : 9,
                              "position"        : 3,
                              "driverId"        : 106,
                              "name"            : "Lewis Hamilton"},
                             {"driverRaceMapId" : 10,
                              "position"        : 4,
                              "driverId"        : 105,
                              "name"            : "George Russell"} ]}')
    WHERE dv.data."_id" = 201;

COMMIT;

prompt See the results for the Bahrain Grand Prix.
prompt You can use a predicate on the primary key field to query by ID.
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY)
  FROM race_dv dv WHERE dv.data."_id" = 201;

prompt ---------------------------------------
prompt Step 7: Update specific fields in the document identified by a predicate --
prompt ---------------------------------------
prompt 
prompt Update Bahrain GP name with sponsor information.
prompt Here we use json_transform to update specific fields. An alternative
prompt approach is to use json_mergepatch, which is standardized (RFC 7386), but is
prompt limited to simple object field updates and cannot be used for updating
prompt specific array elements. The json_transform function, however, can be used
prompt to update specific array elements. Note that the "where" clause can have any
prompt valid SQL expression, e.g. equality on primary key, some condition using
prompt simplified syntax, or JSON function, such as json_value or json_exists.
pause -------------------------------------------;   

UPDATE race_dv dv
  SET data = json_transform(data, SET '$.name' = 'Blue Air Bahrain Grand Prix')
    WHERE dv.data.name LIKE 'Bahrain%';

COMMIT;

SELECT json_serialize(data PRETTY)
  FROM race_dv WHERE json_value(data, '$.name') LIKE 'Blue Air Bahrain%';
prompt -------------------------------------------;
prompt Update Bahrain GP name with sponsor information.
prompt Here we use json_mergepatch instead of json_transform to perform the same
prompt operation. We also use json_exists in the predicate.
pause -------------------------------------------;   

UPDATE race_dv dv
  SET data = json_mergepatch(data, '{"name" : "Blue Air Bahrain Grand Prix"}')
    WHERE dv.data.name LIKE 'Blue Air Bahrain%';

COMMIT;

prompt ------------------------------------------
prompt See the results for the Bahrain Grand Prix.

SELECT json_serialize(data PRETTY)
  FROM race_dv WHERE json_value(data, '$.name') LIKE 'Blue Air Bahrain%';


prompt -------------------------------------------
prompt Step 8: Re-parenting of sub-objects between two documents --
prompt -------------------------------------------
prompt 
prompt Switch Charles Leclerc's and George Russell's teams.
prompt This can be done by updating the Mercedes and Ferrari team_dvs. The
prompt documents can be updated by simply sending the new list of drivers for both
prompt documents in the input.
prompt 
prompt First, show the team documents.
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM team_dv dv
  WHERE dv.data.name LIKE 'Mercedes%';
SELECT json_serialize(data PRETTY) FROM team_dv dv
  WHERE dv.data.name LIKE 'Ferrari%';

prompt ------------------------------------------
prompt Then perform the team Mercedes updates in team_dv.
pause -------------------------------------------;   

UPDATE team_dv dv
  SET data = ('{_metadata : {"etag" : "855840B905C8CAFA99FB9CBF813992E5"},
                "_id" : 2,
                "name"   : "Mercedes",
                "points" : 40,
                "driver" : [ {"driverId" : 106,
                              "name"     : "Lewis Hamilton",
                              "points"   : 15},
                             {"driverId" : 103,
                              "name"     : "Charles Leclerc",
                              "points"   : 25} ]}')
    WHERE dv.data.name LIKE 'Mercedes%';

prompt ------------------------------------------
prompt Then perform the team Ferrari updates in team_dv.
pause -------------------------------------------;   

UPDATE team_dv dv
  SET data = ('{_metadata : {"etag" : "DA69DD103E8BAE95A0C09811B7EC9628"},
                "_id" : 302,
                "name"   : "Ferrari",
                "points" : 30,
                "driver" : [ {"driverId" : 105,
                              "name"     : "George Russell",
                              "points"   : 12},
                             {"driverId" : 104,
                              "name"     : "Carlos Sainz Jr",
                              "points"   : 18} ]}')
    WHERE dv.data.name LIKE 'Ferrari%';

COMMIT;

prompt ------------------------------------------
prompt updates, with dynamic getting etag
pause -------------------------------------------;


UPDATE team_dv dv
SET data = ('{
    "_metadata": {"etag" : ' || (
        SELECT '"' || json_value(data, '$._metadata.etag') || '"'
        FROM (SELECT data FROM team_dv WHERE json_value(data, '$.name') = 'Mercedes' AND ROWNUM = 1)
    ) || '},
                "_id" : 2,
                "name"   : "Mercedes",
                "points" : 40,
                "driver" : [ {"driverId" : 106,
                            "name"     : "Lewis Hamilton",
                            "points"   : 15},
                            {"driverId" : 103,
                            "name"     : "Charles Leclerc",
                            "points"   : 25} ]}')
    WHERE dv.data.name = 'Mercedes';

UPDATE team_dv dv
SET data = ('{
    "_metadata": {"etag" : ' || (
        SELECT '"' || json_value(data, '$._metadata.etag') || '"'
        FROM (SELECT data FROM team_dv WHERE json_value(data, '$.name') = 'Ferrari' AND ROWNUM = 1)
    ) || '},
                "_id" : 302,
                "name"   : "Ferrari",
                "points" : 30,
                "driver" : [ {"driverId" : 105,
                            "name"     : "George Russell",
                            "points"   : 12},
                            {"driverId" : 104,
                            "name"     : "Carlos Sainz Jr",
                            "points"   : 18} ]}')
    WHERE dv.data.name = 'Ferrari';

COMMIT;



prompt ------------------------------------------
prompt Then show the Mercedes team documents after the updates:
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM team_dv dv
  WHERE dv.data.name LIKE 'Mercedes%';

prompt ------------------------------------------
prompt Then show the team Ferrari documents after the updates: 
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM team_dv dv
  WHERE dv.data.name LIKE 'Ferrari%';

prompt ------------------------------------------
prompt Then show the driver Charles Leclerc documents after the updates:
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM driver_dv dv
  WHERE dv.data.name LIKE 'Charles Leclerc%';

prompt ------------------------------------------
prompt Then show the driver eorge Russelldocuments after the updates:
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM driver_dv dv
  WHERE dv.data.name LIKE 'George Russell%';
  
prompt -------------------------------------------
prompt Step 9: Update a non-updateable field --
prompt -------------------------------------------
prompt 
prompt Update team for a driver through driver_dv.
prompt This will throw an error
prompt because the team field in the driver_dv duality view is marked as
prompt read-only (using the WITH NOUPDATE clause in the view definition).
pause -------------------------------------------;   

UPDATE driver_dv dv
  SET DATA = ('{_metadata : {"etag" : "FCD4CEC63897F60DEA1EC2F64D3CE53A"},
                "_id" : 103,
                "name" : "Charles Leclerc",
                "points" : 25,
                "teamId" : 2,
                "team" : "Ferrari",
                "race" :
                [
                  {
                    "driverRaceMapId" : 3,
                    "raceId" : 201,
                    "name" : "Blue Air Bahrain Grand Prix",
                    "finalPosition" : 1
                  }
                ]
            }')
  WHERE dv.data."_id" = 103;




UPDATE team_dv dv
SET data = ('{
    "_metadata": {"etag" : ' || (
        SELECT '"' || json_value(data, '$._metadata.etag') || '"'
        FROM (SELECT data FROM team_dv WHERE json_value(data, '$.name') = 'Mercedes' AND ROWNUM = 1)
    ) || '},
                "_id" : 2,
                "name"   : "Mercedes",
                "points" : 40,
                "driver" : [ {"driverId" : 106,
                            "name"     : "Lewis Hamilton",
                            "points"   : 15},
                            {"driverId" : 103,
                            "name"     : "Charles Leclerc",
                            "points"   : 25} ]}')
    WHERE dv.data.name = 'Mercedes';
COMMIT;

  
prompt -----------------------------------------
prompt Step 10: Delete by predicate --
prompt 
prompt Delete the race document for Bahrain GP.
prompt The underlying rows are deleted from the race and driver_race_map
prompt tables, but not from the driver table because it is marked read-only
prompt in the view definition. Note that the "where" clause can have any
prompt valid SQL expression, e.g. equality on primary key, some condition using
prompt simplified syntax, or JSON function, such as json_value or json_exists.
pause -------------------------------------------;   

DELETE FROM race_dv dv WHERE dv.data."_id" = 201;

prompt ------------------------------------------
prompt Select  race documents to see the effect of the delete.
pause -------------------------------------------;   

SELECT json_serialize(data PRETTY) FROM race_dv;

prompt ------------------------------------------
prompt Select  driver documents to see the effect of the delete.
pause -------------------------------------------;   


SELECT json_serialize(data PRETTY) FROM driver_dv;


prompt ------------------------------------------;
prompt Task 1: Inserting into SQL tables and Duality Views
prompt 
prompt Here we will check the base table to ensure the record does not exist,
prompt insert the following into the duality view, and then check the base table.
prompt ------------------------------------------;
prompt select table are not exists records
pause -------------------------------------------;

SELECT name FROM race where race_id = 204;

prompt ------------------------------------------;
prompt Inserting into  Duality Views
pause ------------------------------------------;
INSERT INTO race_dv VALUES ('{"_id" : 204,
                        "name"   : "Miami Grand Prix",
                        "laps"   : 57,
                        "date"   : "2022-05-08T00:00:00",
                        "podium" : {}}');

prompt ------------------------------------------;
prompt select table are exists records
pause ------------------------------------------;

SELECT name FROM race where race_id = 204;


Prompt -------------------------------------------;
prompt Now we will check for the opposite. We will verify that inserting 
prompt a record directly into the base table race is reflected in the race_dv JSON duality view. 
prompt Lets look at the duality view, insert into the base table and then check the duality view for the record.
Prompt -------------------------------------------;
prompt select duality view are not exists records
pause ------------------------------------------;

SELECT json_serialize(data PRETTY)
FROM race_dv WHERE json_value(data, '$._id') = 205;

prompt ------------------------------------------;
prompt Inserting into table
pause ------------------------------------------;

INSERT INTO race
VALUES(205, 'Japanese Grand Prix', 53, TO_DATE('2022-10-08','YYYY-MM-DD'), '{}');

Prompt -----------------------------------------;
prompt select duality view are exists records
pause ------------------------------------------;

SELECT json_serialize(data PRETTY)
FROM race_dv WHERE json_value(data, '$._id') = 205;

prompt -----------------------------------------;
prompt Update and replace a document by ID
prompt -----------------------------------------;
prompt replace a document with the OBJECT_ID through the duality view. 
prompt You are able to get the same functionality with the SQL table.
prompt ------------------------------------------;
prompt select duality view  record _id 204
pause -------------------------------------------;

SELECT json_serialize(data PRETTY)
FROM race_dv WHERE json_value(data, '$._id') = 204;

Prompt -----------------------------------------;
prompt Update table race where id = 204
pause ------------------------------------------;

UPDATE race
SET name = 'Miami Grand Prix',
podium = '{"winner":{"name":"Charles Leclerc","time":"01:37:33.584"},
"firstRunnerUp":{"name":"Carlos Sainz Jr","time":"01:37:39.182"},
"secondRunnerUp":{"name":"Lewis Hamilton","time":"01:37:43.259"}}'
WHERE race_id = 204;

Prompt -----------------------------------------;
prompt Insert into driver_race_map table
pause ------------------------------------------;

INSERT INTO driver_race_map
VALUES(3, 204, 103, 1),
(4, 204, 104, 2),
(9, 204, 106, 3),
(10, 204, 105, 4);

prompt ------------------------------------------;
prompt select duality view  race_dv
pause -------------------------------------------;

SELECT json_serialize(data PRETTY)
FROM race_dv WHERE json_value(data, '$._id') = 204;





prompt ------------------------------------------
prompt enabled JSON_DEMO for REST access
pause -------------------------------------------;   


BEGIN
  ords.enable_schema (
    p_enabled => TRUE, -- Default  { TRUE | FALSE }
    p_schema  => 'JSON_DEMO'
  );
  commit;
END;


prompt ------------------------------------------
prompt enabled duality views for REST access
pause -------------------------------------------;   


begin
  ords.enable_object (
    p_enabled      => TRUE, -- Default  { TRUE | FALSE }
    p_schema       => 'JSON_DEMO',
    p_object       => 'TEAM_DV',
    p_object_type  => 'VIEW', -- Default  { TABLE | VIEW }
    p_object_alias => 'Teams'
  );    
  commit;
end;
/


begin
  ords.enable_object (
    p_enabled      => TRUE, -- Default  { TRUE | FALSE }
    p_schema       => 'JSON_DEMO',
    p_object       => 'DRIVER_DV',
    p_object_type  => 'VIEW', -- Default  { TABLE | VIEW }
    p_object_alias => 'Drivers'
  );    
  Commit;
end;
/

begin
  ords.enable_object (
    p_enabled      => TRUE, -- Default  { TRUE | FALSE }
    p_schema       => 'JSON_DEMO',
    p_object       => 'RACE_DV',
    p_object_type  => 'VIEW', -- Default  { TABLE | VIEW }
    p_object_alias => 'Races'
  );    
  Commit;
end;
/


begin
  ords.enable_object (
    p_enabled      => TRUE, -- Default  { TRUE | FALSE }
    p_schema       => 'JSON_DEMO',
    p_object       => 'DRIVER_DV_GRAPHGL',
    p_object_type  => 'VIEW', -- Default  { TABLE | VIEW }
    p_object_alias => 'Drivers_graphgl'
  );    
  Commit;
end;
/

begin
  ords.enable_object (
    p_enabled      => TRUE, -- Default  { TRUE | FALSE }
    p_schema       => 'JSON_DEMO',
    p_object       => 'TEAM_DV_GRAPHGL',
    p_object_type  => 'VIEW', -- Default  { TABLE | VIEW }
    p_object_alias => 'Teams_graphgl'
  );    
  Commit;
end;
/

begin
  ords.enable_object (
    p_enabled      => TRUE, -- Default  { TRUE | FALSE }
    p_schema       => 'JSON_DEMO',
    p_object       => 'RACE_DV_GRAPHQL',
    p_object_type  => 'VIEW', -- Default  { TABLE | VIEW }
    p_object_alias => 'Races_graphgl'
  );    
  Commit;
end;
/



COMMIT;
